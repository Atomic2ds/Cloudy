import discord
from discord.ext import commands
from discord import app_commands
import random
from typing import Optional
import os
from discord.app_commands import Choice
import datetime
import json
import traceback
import io
import requests
import config
import aiohttp
from embeds import embedutil
from config import client
db = client.utils

class artcog(commands.Cog):
    
    def __init__(self, bot):
        self.bot = bot

    @commands.Cog.listener()
    async def on_ready(self):
        print("┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓")
        print("┃  Loaded the Art Cog            ┃")
        print("┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛")

    art_cmd = app_commands.Group(name="art", description="Configure and run your own Art Channel!")

    @art_cmd.command(name="channel",description="Set a channel for all art to go to")
    async def art_channel(self, interaction: discord.Interaction, option: discord.TextChannel):
        await interaction.response.defer()
        try:
         if interaction.user.guild_permissions.manage_guild:
          channel = option
          if db.art.find_one({"guild_id": interaction.guild.id}):
            db.art.update_one({"guild_id": interaction.guild.id},{"$set": {"channel_id": channel.id}})
          else:
            db.art.insert_one({"guild_id": interaction.guild.id,"channel_id": channel.id,"submissions_chanel": None})
          await channel.send(embed=embedutil("art","enabled"))
          await interaction.followup.send(embed=embedutil("success",f"Successfully set {channel.mention} as the art channel!"))
         else:
            await interaction.followup.send(embed=embedutil("denied","Your don't have permission to run this command"))
        except Exception:
            await interaction.followup.send(embed=embedutil("error",traceback.format_exc()))

    @art_cmd.command(name="apply",description="Apply for your art to be featured on the art channel")
    async def apply_art(self, interaction: discord.Interaction, image: Optional[discord.Attachment], image_url: Optional[str], name: str, description: str):
       await interaction.response.defer(ephemeral=True)
       try:
          if image == None and image_url == None:
             await interaction.followup.send(embed=embedutil("denied","You have to upload either a imgae file or a image url"))
             return
          
          if not image == None and not image_url == None:
             await interaction.followup.send(embed=embedutil("denied","You have to upload either a imgae file or a image url, not both"))
             return

          if not "https" in image_url:
             await interaction.followup.send(embed=embedutil("denied","You entered an invalid image url"))
             return
          
          
          
          
       except Exception:
          await interaction.followup.send(embed=embedutil("error",traceback.format_exc()))
       

async def setup(bot):
    await bot.add_cog(artcog(bot))

async def fetch_data(url, headers):
    async with aiohttp.ClientSession() as session:
        async with session.get(url, headers=headers) as response:
            # Assuming the response is in JSON format
            data = await response.json()
            return data